<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="1 Проект.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="13170"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><table title="CommoditySMPG" custom_title="0" dock_id="4" table="4,13:mainCommoditySMPG"/><dock_state state="000000ff00000000fd00000001000000020000057b00000387fc0100000003fb000000160064006f0063006b00420072006f00770073006500310100000000ffffffff0000000000000000fb000000160064006f0063006b00420072006f00770073006500320100000000000004c00000000000000000fb000000160064006f0063006b00420072006f007700730065003401000000000000057b0000013200ffffff0000057b0000000000000004000000040000000800000008fc00000000"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="AP2" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="223"/><column index="2" value="39"/><column index="3" value="159"/><column index="4" value="39"/><column index="5" value="39"/><column index="6" value="39"/><column index="7" value="39"/><column index="8" value="39"/><column index="9" value="39"/><column index="10" value="46"/><column index="11" value="46"/><column index="12" value="46"/><column index="13" value="46"/><column index="14" value="46"/><column index="15" value="46"/><column index="16" value="46"/><column index="17" value="46"/><column index="18" value="46"/><column index="19" value="46"/><column index="20" value="46"/><column index="21" value="46"/><column index="22" value="46"/><column index="23" value="46"/><column index="24" value="46"/><column index="25" value="46"/><column index="26" value="46"/><column index="27" value="46"/><column index="28" value="46"/><column index="29" value="46"/><column index="30" value="46"/><column index="31" value="46"/><column index="32" value="46"/><column index="33" value="46"/><column index="34" value="46"/><column index="35" value="46"/><column index="36" value="46"/><column index="37" value="46"/><column index="38" value="46"/><column index="39" value="46"/><column index="40" value="46"/><column index="41" value="46"/><column index="42" value="46"/><column index="43" value="46"/><column index="44" value="46"/><column index="45" value="46"/><column index="46" value="46"/><column index="47" value="46"/><column index="48" value="46"/><column index="49" value="46"/><column index="50" value="46"/><column index="51" value="46"/><column index="52" value="46"/><column index="53" value="46"/><column index="54" value="46"/><column index="55" value="46"/><column index="56" value="46"/><column index="57" value="46"/><column index="58" value="46"/><column index="59" value="46"/><column index="60" value="46"/><column index="61" value="46"/><column index="62" value="46"/><column index="63" value="46"/><column index="64" value="46"/><column index="65" value="46"/><column index="66" value="46"/><column index="67" value="46"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Commodity" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="159"/><column index="2" value="39"/><column index="3" value="77"/><column index="4" value="300"/><column index="5" value="79"/><column index="6" value="79"/><column index="7" value="79"/><column index="8" value="159"/><column index="9" value="71"/><column index="10" value="127"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="CommoditySMP" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort><column index="9" mode="0"/></sort><column_widths><column index="1" value="53"/><column index="2" value="35"/><column index="3" value="103"/><column index="4" value="130"/><column index="5" value="35"/><column index="6" value="54"/><column index="7" value="130"/><column index="8" value="173"/><column index="9" value="84"/><column index="10" value="109"/><column index="11" value="54"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="CommoditySMPG" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort><column index="10" mode="0"/></sort><column_widths><column index="1" value="207"/><column index="2" value="39"/><column index="3" value="103"/><column index="4" value="130"/><column index="5" value="39"/><column index="6" value="54"/><column index="7" value="130"/><column index="8" value="173"/><column index="9" value="84"/><column index="10" value="109"/><column index="11" value="135"/><column index="12" value="71"/><column index="13" value="159"/><column index="14" value="94"/><column index="15" value="78"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Countries" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort><column index="7" mode="0"/></sort><column_widths><column index="1" value="199"/><column index="2" value="39"/><column index="3" value="103"/><column index="4" value="130"/><column index="5" value="39"/><column index="6" value="54"/><column index="7" value="130"/><column index="8" value="173"/><column index="9" value="79"/><column index="10" value="159"/><column index="11" value="94"/><column index="12" value="78"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Life1" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort><column index="0" mode="0"/></sort><column_widths><column index="1" value="223"/><column index="2" value="39"/><column index="3" value="135"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="LifeS" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="223"/><column index="2" value="39"/><column index="3" value="135"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="LifeS1" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="159"/><column index="2" value="39"/><column index="3" value="242"/><column index="4" value="84"/><column index="5" value="109"/><column index="6" value="135"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="PopulationS1" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="263"/><column index="2" value="39"/><column index="3" value="103"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="PopulationSP" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort><column index="2" mode="0"/></sort><column_widths><column index="1" value="263"/><column index="2" value="39"/><column index="3" value="173"/><column index="4" value="84"/><column index="5" value="109"/><column index="6" value="135"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Results_dfW2" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort><column index="10" mode="0"/></sort><column_widths><column index="1" value="199"/><column index="2" value="39"/><column index="3" value="103"/><column index="4" value="130"/><column index="5" value="47"/><column index="6" value="55"/><column index="7" value="130"/><column index="8" value="173"/><column index="9" value="79"/><column index="10" value="103"/><column index="11" value="94"/><column index="12" value="79"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="UrbS" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="223"/><column index="2" value="39"/><column index="3" value="135"/></column_widths><filter_values><column index="0" value="baha"/></filter_values><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Urban1" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="223"/><column index="2" value="39"/><column index="3" value="135"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="CommodityS">CREATE VIEW CommodityS AS
WITH corrected_countries AS (
    SELECT CASE country_or_area
            WHEN 'Bosnia Herzegovina' THEN 'Bosnia and Herzegovina'
			WHEN 'Bolivia (Plurinational State of)' THEN 'Bolivia'
            WHEN 'Central African Rep.' THEN 'Central African Republic'
            WHEN 'Cook Isds' THEN 'Cook Islands'
			WHEN &quot;Côte d'Ivoire&quot; THEN &quot;Cote d'Ivoire&quot; 
            WHEN 'Czech Rep.' THEN 'Czech Republic'
            WHEN 'Dominican Rep.' THEN 'Dominican Republic'
            WHEN 'EU-28' THEN 'European Union (27)'
            WHEN 'Fmr Fed. Rep. of Germany' THEN 'Germany'
			WHEN 'Fmr Sudan' THEN 'Sudan'
            WHEN 'FS Micronesia' THEN 'Micronesia'
            WHEN 'Faeroe Isds' THEN 'Faroe Islands'
            --WHEN 'Iran' THEN 'Iran (Islamic Republic of)'
            WHEN &quot;Lao People's Dem. Rep.&quot; THEN &quot;Laos&quot;
            WHEN 'Neth. Antilles' THEN 'Netherlands Antilles'
            --WHEN 'Netherlands' THEN 'Netherlands (Kingdom of the)'
            WHEN 'Rep. of Korea' THEN 'South Korea'
            WHEN 'Rep. of Moldova' THEN 'Republic of Moldova'
            WHEN 'Russian Federation' THEN 'Russia'
            WHEN 'Solomon Isds' THEN 'Solomon Islands'
            WHEN 'State of Palestine' THEN 'Palestine'
            WHEN 'Swaziland' THEN 'Eswatini'
            WHEN 'Syria' THEN 'Syrian Arab Republic'
            WHEN 'TFYR of Macedonia' THEN 'North Macedonia'
            --WHEN 'Turkey' THEN 'Türkiye'
            WHEN 'Turks and Caicos Isds' THEN 'Turks and Caicos Islands'
            WHEN 'United Kingdom' THEN 'United Kingdom of Great Britain and Northern Ireland'
            WHEN 'United Rep. of Tanzania' THEN 'Tanzania'
            --WHEN 'Venezuela' THEN 'Venezuela (Bolivarian Republic of)'
            WHEN 'Wallis and Futuna Isds' THEN 'Wallis and Futuna Islands'
            ELSE country_or_area
        END AS Country,
        year,
        commodity,
        flow,
        weight_kg
    FROM Commodity
    WHERE 
        year BETWEEN 1996 AND 2016
        AND commodity LIKE '%Chocolate, cocoa%'
        AND commodity NOT LIKE '%Machines%'
        AND flow IN ('Import', 'Re-Import')
		AND country_or_area != 'So. African Customs Union'
)
SELECT 
    Country,
    year as Year,
    CAST(SUM(weight_kg) AS REAL) AS Total_weight_kg
FROM corrected_countries
WHERE Country != 'Other Asia, nes'
AND Country != 'Turkmenistan'
GROUP BY country, year
ORDER BY country, year</sql><sql name="CommodityS1">CREATE VIEW CommodityS1 AS
WITH split_countries AS (
    
    SELECT Country, Year, Total_weight_kg
    FROM CommodityS
    WHERE Country NOT IN ('Belgium-Luxembourg', 'Serbia and Montenegro')
    UNION ALL

    SELECT 'Belgium' AS Country, Year, Total_weight_kg * 0.96 AS Total_weight_kg
    FROM CommodityS
    WHERE Country = 'Belgium-Luxembourg'
    UNION ALL
    
    SELECT 'Luxembourg' AS Country, Year, Total_weight_kg * 0.04 AS Total_weight_kg
    FROM CommodityS
    WHERE Country = 'Belgium-Luxembourg'
    UNION ALL
    
    SELECT 'Serbia' AS Country, Year, Total_weight_kg * 0.92 AS Total_weight_kg
    FROM CommodityS
    WHERE Country = 'Serbia and Montenegro'
    UNION ALL
    
    SELECT 'Montenegro' AS Country, Year, Total_weight_kg * 0.08 AS Total_weight_kg
    FROM CommodityS
    WHERE Country = 'Serbia and Montenegro'
)
SELECT Country, Year, Total_weight_kg
FROM split_countries
ORDER BY Country, Year</sql><sql name="MetroS">--CREATE VIEW MetroS AS
WITH corrected_countries AS (
    SELECT CASE country
            WHEN 'Türkiye' THEN 'Turkey'
			WHEN 'United States' THEN 'USA'
			WHEN 'United Kingdom' THEN 'United Kingdom of Great Britain and Northern Ireland' 
            ELSE country
        END AS Country,
		length,	
        lines, 
        stations, 
        annual_ridership_mill, 
        inauguration AS Year
    FROM Metro
    WHERE inauguration &lt;= 2016
)
SELECT 
    Country,
	length,
    lines,
    stations,
    annual_ridership_mill,
    Year
FROM corrected_countries
ORDER BY Country</sql><sql name="CommoditySM">--CREATE VIEW CommoditySM AS
SELECT 
    c.Country,
    c.Year,
    c.total_weight_kg,
    CASE WHEN m.Country IS NOT NULL AND m.Year &lt;= c.Year THEN m.length
        ELSE NULL 
    END AS length,
    CASE WHEN m.Country IS NOT NULL AND m.Year &lt;= c.Year THEN m.lines
        ELSE NULL 
    END AS lines,
    CASE WHEN m.Country IS NOT NULL AND m.Year &lt;= c.Year THEN m.stations
        ELSE NULL 
    END AS stations,
    CASE WHEN m.Country IS NOT NULL AND m.Year &lt;= c.Year THEN m.annual_ridership_mill
        ELSE NULL 
    END AS annual_ridership_mill,
    CASE WHEN m.Country IS NOT NULL AND m.Year &lt;= c.Year THEN 'Yes'
        ELSE 'No'
    END AS availability_of_metro
FROM 
    CommodityS1 c
LEFT JOIN 
    MetroS m ON c.Country = m.Country
ORDER BY 
    c.Country, 
    c.Year</sql><sql name="PopulationS">--CREATE VIEW PopulationS AS
WITH corrected_countries AS (
    SELECT 
        CASE Area
            WHEN 'Bosnia Herzegovina' THEN 'Bosnia and Herzegovina'
			WHEN 'Bolivia (Plurinational State of)' THEN 'Bolivia'
            WHEN 'Central African Rep.' THEN 'Central African Republic'
            WHEN 'Cook Isds' THEN 'Cook Islands'
			WHEN &quot;Côte d'Ivoire&quot; THEN &quot;Cote d'Ivoire&quot; 
            WHEN 'Czechia' THEN 'Czech Republic'
            WHEN 'Dominican Rep.' THEN 'Dominican Republic'
            WHEN 'EU-28' THEN 'European Union (27)'
            WHEN 'Fmr Fed. Rep. of Germany' THEN 'Germany'
			WHEN 'Fmr Sudan' THEN 'Sudan'
            WHEN 'FS Micronesia' THEN 'Micronesia'
            WHEN 'Faeroe Isds' THEN 'Faroe Islands'
			WHEN 'Iran (Islamic Republic of)' THEN 'Iran'
            WHEN &quot;Lao People's Democratic Republic&quot; THEN &quot;Laos&quot;
			WHEN 'Netherlands Antilles (former)' THEN 'Netherlands Antilles'
            WHEN 'Netherlands (Kingdom of the)' THEN 'Netherlands'
            WHEN 'Neth. Antilles' THEN 'Netherlands Antilles'
            WHEN 'Republic of Korea' THEN 'South Korea'
            WHEN 'Rep. of Moldova' THEN 'Republic of Moldova'
            WHEN 'Russian Federation' THEN 'Russia'
            WHEN 'Solomon Isds' THEN 'Solomon Islands'
            WHEN 'State of Palestine' THEN 'Palestine'
			WHEN 'Sudan (former)' THEN 'Sudan'
            WHEN 'Swaziland' THEN 'Eswatini'
            WHEN 'Syria' THEN 'Syrian Arab Republic'
            WHEN 'TFYR of Macedonia' THEN 'North Macedonia'
            WHEN 'Turks and Caicos Isds' THEN 'Turks and Caicos Islands'
			WHEN 'Türkiye' THEN 'Turkey'
            WHEN 'United Kingdom' THEN 'United Kingdom of Great Britain and Northern Ireland'
            WHEN 'United Republic of Tanzania' THEN 'Tanzania'
			WHEN 'United States of America' THEN 'USA'
			WHEN 'Venezuela (Bolivarian Republic of)' THEN 'Venezuela'
            WHEN 'Wallis and Futuna Isds' THEN 'Wallis and Futuna Islands' 
            ELSE Area
        END AS Country, 
        Year, 
        Value * 1000 AS Population
    FROM Population
    WHERE Element = 'Total Population - Both sexes'
        AND Year BETWEEN 1996 AND 2016
)
SELECT 
    Country, 
    Year, 
    Population
FROM corrected_countries
ORDER BY Country, Year</sql><sql name="PopulationS1">--CREATE VIEW PopulationS1 AS
WITH transformed_population AS (
    -- Original data excluding countries to be split
    SELECT Country, Year, Population
    FROM PopulationS
    WHERE Country NOT IN ('Belgium-Luxembourg', 'Serbia and Montenegro')
    
    UNION ALL
    
    SELECT 
        'Belgium' AS Country,
        Year,
        Population * 0.96 AS Population
    FROM PopulationS
    WHERE Country = 'Belgium-Luxembourg'
    
    UNION ALL
    
    SELECT 
        'Luxembourg' AS Country,
        Year,
        Population * 0.04 AS Population
    FROM PopulationS
    WHERE Country = 'Belgium-Luxembourg'
    
    UNION ALL
    
    -- Split Serbia and Montenegro (92%/8%)
    SELECT 
        'Serbia' AS Country,
        Year,
        Population * 0.92 AS Population
    FROM PopulationS
    WHERE Country = 'Serbia and Montenegro'
    
    UNION ALL
    
    SELECT 
        'Montenegro' AS Country,
        Year,
        Population * 0.08 AS Population
    FROM PopulationS
    WHERE Country = 'Serbia and Montenegro'
)

SELECT 
    Country, 
    Year, 
    ROUND(Population,0) AS Population
FROM 
    transformed_population
ORDER BY 
    Country, 
    Year;</sql><sql name="PercentS">--CREATE VIEW PercentS AS
WITH corrected_countries AS (
    SELECT 
        CASE Country
            WHEN 'Bosnia Herzegovina' THEN 'Bosnia and Herzegovina'
			WHEN 'Bolivia (Plurinational State of)' THEN 'Bolivia'
            WHEN 'Central African Rep.' THEN 'Central African Republic'
            WHEN 'Cook Isds' THEN 'Cook Islands'
            WHEN 'Czechia' THEN 'Czech Republic'
            WHEN 'Dominican Rep.' THEN 'Dominican Republic'
            WHEN 'EU-28' THEN 'European Union (27)'
            WHEN 'Fmr Fed. Rep. of Germany' THEN 'Germany'
			WHEN 'Fmr Sudan' THEN 'Sudan'
            WHEN 'FS Micronesia' THEN 'Micronesia'
            WHEN 'Faeroe Isds' THEN 'Faroe Islands'
			WHEN 'Iran (Islamic Republic of)' THEN 'Iran'
            WHEN &quot;Lao People's Democratic Republic&quot; THEN &quot;Laos&quot;
            WHEN 'Netherlands Antilles (former)' THEN 'Netherlands Antilles'
			WHEN 'Netherlands (Kingdom of the)' THEN 'Netherlands'
            WHEN 'Republic of Korea' THEN 'South Korea'
            WHEN 'Rep. of Moldova' THEN 'Republic of Moldova'
            WHEN 'Russian Federation' THEN 'Russia'
            WHEN 'Solomon Isds' THEN 'Solomon Islands'
            WHEN 'State of Palestine' THEN 'Palestine'
            WHEN 'Swaziland' THEN 'Eswatini'
            WHEN 'Syria' THEN 'Syrian Arab Republic'
            WHEN 'TFYR of Macedonia' THEN 'North Macedonia'
			WHEN 'Turkiye' THEN 'Turkey'
            WHEN 'Turks and Caicos Isds' THEN 'Turks and Caicos Islands'
            WHEN 'United Kingdom' THEN 'United Kingdom of Great Britain and Northern Ireland'
            WHEN 'United Republic of Tanzania' THEN 'Tanzania'
			WHEN 'Venezuela (Bolivarian Republic of)' THEN 'Venezuela'
            WHEN 'Wallis and Futuna Isds' THEN 'Wallis and Futuna Islands' 
            ELSE Country
        END AS Country, 
        percent_of_population_eating_chocolate,
		Cost_kg_USD
    FROM Percent
)
SELECT 
    Country, 
    percent_of_population_eating_chocolate,
	Cost_kg_USD
FROM corrected_countries
ORDER BY Country</sql><sql name="PopulationSP">CREATE VIEW PopulationSP AS
SELECT p.Country, p.Year, ROUND((p.Population * c.percent_of_population_eating_chocolate / 100),0) AS Population_eating_chocolate, c.Cost_kg_USD
FROM PopulationS1 p
LEFT JOIN PercentS c ON p.Country = c.Country
ORDER BY p.Country, p.Year
</sql><sql name="UrbS">CREATE VIEW UrbS AS
WITH corrected_countries AS (
    SELECT 
        CASE Country
            WHEN 'Bosnia Herzegovina' THEN 'Bosnia and Herzegovina'
			WHEN 'Bolivia (Plurinational State of)' THEN 'Bolivia'
            WHEN 'Central African Rep.' THEN 'Central African Republic'
            WHEN 'Cook Isds' THEN 'Cook Islands'
            WHEN 'Czechia' THEN 'Czech Republic'
            WHEN 'Dominican Rep.' THEN 'Dominican Republic'
            WHEN 'European Union' THEN 'European Union (27)'
            WHEN 'Fmr Fed. Rep. of Germany' THEN 'Germany'
			WHEN 'Fmr Sudan' THEN 'Sudan'
            WHEN 'Micronesia Fed. Sts.' THEN 'Micronesia'
            WHEN 'Faeroe Isds' THEN 'Faroe Islands'
			WHEN 'Iran Islamic Rep.' THEN 'Iran'
            WHEN 'Lao PDR' THEN 'Laos'
            WHEN 'Netherlands Antilles (former)' THEN 'Netherlands Antilles'
			WHEN 'Netherlands (Kingdom of the)' THEN 'Netherlands'
            WHEN 'Republic of Korea' THEN 'South Korea'
            WHEN 'Moldova' THEN 'Republic of Moldova'
            WHEN 'Russian Federation' THEN 'Russia'
            WHEN 'Solomon Isds' THEN 'Solomon Islands'
            WHEN 'State of Palestine' THEN 'Palestine'
            WHEN 'Swaziland' THEN 'Eswatini'
            WHEN 'Syria' THEN 'Syrian Arab Republic'
            WHEN 'TFYR of Macedonia' THEN 'North Macedonia'
			WHEN 'Turkiye' THEN 'Turkey'
            WHEN 'Turks and Caicos Isds' THEN 'Turks and Caicos Islands'
            WHEN 'United Kingdom' THEN 'United Kingdom of Great Britain and Northern Ireland'
            WHEN 'United Republic of Tanzania' THEN 'Tanzania'
			WHEN 'Venezuela RB' THEN 'Venezuela'
			WHEN 'Wallis and Futuna Isds' THEN 'Wallis and Futuna Islands'
            WHEN 'Bahamas The' THEN 'Bahamas'
			WHEN 'Hong Kong SAR China' THEN 'China, Hong Kong SAR'
			WHEN 'Macao SAR China' THEN 'China, Macao SAR'
			WHEN 'Congo Rep.' THEN 'Congo'
			WHEN 'Egypt Arab Rep.' THEN 'Egypt'
			WHEN 'Gambia The' THEN 'Gambia'
			WHEN 'Kyrgyz Republic' THEN 'Kyrgyzstan'
			WHEN 'St. Kitts and Nevis' THEN 'Saint Kitts and Nevis'
			WHEN 'St. Lucia' THEN 'Saint Lucia'
			WHEN 'St. Vincent and the Grenadines' THEN 'Saint Vincent and the Grenadines'
			WHEN 'Slovak Republic' THEN 'Slovakia'
			WHEN 'Korea Rep.' THEN 'South Korea'
			WHEN 'United States' THEN 'USA'
			WHEN 'Vietnam' THEN 'Viet Nam'
			WHEN 'Yemen Rep.' THEN 'Yemen'
            ELSE Country
        END AS Country, 
        Year,
		Urban_population
    FROM Urban1
)
SELECT 
    Country, 
    Year,
	Urban_population
FROM corrected_countries
ORDER BY Country</sql><sql name="LifeS*">CREATE VIEW LifeS AS
WITH corrected_countries AS (
    SELECT 
        CASE Country
            WHEN 'Bosnia Herzegovina' THEN 'Bosnia and Herzegovina'
			WHEN 'Bolivia (Plurinational State of)' THEN 'Bolivia'
            WHEN 'Central African Rep.' THEN 'Central African Republic'
            WHEN 'Cook Isds' THEN 'Cook Islands'
            WHEN 'Czechia' THEN 'Czech Republic'
            WHEN 'Dominican Rep.' THEN 'Dominican Republic'
            WHEN 'European Union' THEN 'European Union (27)'
            WHEN 'Fmr Fed. Rep. of Germany' THEN 'Germany'
			WHEN 'Fmr Sudan' THEN 'Sudan'
            WHEN 'Micronesia, Fed. Sts.' THEN 'Micronesia'
            WHEN 'Faeroe Isds' THEN 'Faroe Islands'
			WHEN 'Iran, Islamic Rep.' THEN 'Iran'
            WHEN 'Lao PDR' THEN 'Laos'
            WHEN 'Netherlands Antilles (former)' THEN 'Netherlands Antilles'
			WHEN 'Netherlands (Kingdom of the)' THEN 'Netherlands'
            WHEN 'Republic of Korea' THEN 'South Korea'
            WHEN 'Moldova' THEN 'Republic of Moldova'
            WHEN 'Russian Federation' THEN 'Russia'
            WHEN 'Solomon Isds' THEN 'Solomon Islands'
            WHEN 'State of Palestine' THEN 'Palestine'
            WHEN 'Swaziland' THEN 'Eswatini'
            WHEN 'Syria' THEN 'Syrian Arab Republic'
            WHEN 'TFYR of Macedonia' THEN 'North Macedonia'
			WHEN 'Turkiye' THEN 'Turkey'
            WHEN 'Turks and Caicos Isds' THEN 'Turks and Caicos Islands'
            WHEN 'United Kingdom' THEN 'United Kingdom of Great Britain and Northern Ireland'
            WHEN 'United Republic of Tanzania' THEN 'Tanzania'
			WHEN 'Venezuela, RB' THEN 'Venezuela'
			WHEN 'Wallis and Futuna Isds' THEN 'Wallis and Futuna Islands'
            WHEN 'Bahamas, The' THEN 'Bahamas'
			WHEN 'Hong Kong SAR, China' THEN 'China, Hong Kong SAR'
			WHEN 'Macao SAR, China' THEN 'China, Macao SAR'
			WHEN 'Congo, Rep.' THEN 'Congo'
			WHEN 'Egypt, Arab Rep.' THEN 'Egypt'
			WHEN 'Gambia, The' THEN 'Gambia'
			WHEN 'Kyrgyz Republic' THEN 'Kyrgyzstan'
			WHEN 'St. Kitts and Nevis' THEN 'Saint Kitts and Nevis'
			WHEN 'St. Lucia' THEN 'Saint Lucia'
			WHEN 'St. Vincent and the Grenadines' THEN 'Saint Vincent and the Grenadines'
			WHEN 'Slovak Republic' THEN 'Slovakia'
			WHEN 'Korea, Rep.' THEN 'South Korea'
			WHEN 'United States' THEN 'USA'
			WHEN 'Vietnam' THEN 'Viet Nam'
			WHEN 'Yemen, Rep.' THEN 'Yemen' 
            ELSE Country
        END AS Country, 
        Year,
		Lifetime
    FROM Life1
)
SELECT 
    Country, 
    Year,
	Lifetime
FROM corrected_countries
ORDER BY Country</sql><sql name="LifeS1">CREATE VIEW LifeS1 AS
SELECT 
    u.Country, 
    u.Year,
    u.Urban_population,
    l.Lifetime  
FROM UrbS u
LEFT JOIN LifeS l ON u.Country = l.Country AND u.Year = l.Year  
WHERE u.Year BETWEEN 1996 AND 2016
ORDER BY u.Country, u.Year</sql><sql name="PopulationSPL">CREATE VIEW PopulationSPL AS
SELECT p.Country, p.Year, p.Population_eating_chocolate, p.Cost_kg_USD, c.Urban_population, c.Lifetime
FROM PopulationSP p
LEFT JOIN LifeS1 c ON p.Country = c.Country AND p.Year = c.Year
ORDER BY p.Country, p.Year
</sql><sql name="CommoditySMP">CREATE VIEW CommoditySMP AS
SELECT 
    c.Country,
    c.Year,
    c.total_weight_kg,
    c.availability_of_metro,
    c.lines,
    c.stations,
    c.annual_ridership_mill,
    p.Population_eating_chocolate,
	p.Cost_kg_USD, 
	p.Urban_population, 
	p.Lifetime
FROM 
    CommoditySM c
LEFT JOIN 
    PopulationSPL p ON c.Country = p.Country AND c.Year = p.Year
ORDER BY 
    c.Year, 
    c.Country</sql><sql name="GDPS">--CREATE VIEW GDPS AS
WITH corrected_Areas AS (
    SELECT CAST(CASE Area
            WHEN 'China, mainland' THEN 'China'
            WHEN 'Bosnia Herzegovina' THEN 'Bosnia and Herzegovina'
			WHEN 'Bolivia (Plurinational State of)' THEN 'Bolivia'
            WHEN 'Central African Rep.' THEN 'Central African Republic'
            WHEN 'Cook Isds' THEN 'Cook Islands'
			WHEN &quot;Côte d'Ivoire&quot; THEN &quot;Cote d'Ivoire&quot; 
            WHEN 'Czechia' THEN 'Czech Republic'
            WHEN 'Dominican Rep.' THEN 'Dominican Republic'
            WHEN 'EU-28' THEN 'European Union (27)'
            WHEN 'Fmr Fed. Rep. of Germany' THEN 'Germany'
			WHEN 'Fmr Sudan' THEN 'Sudan'
            WHEN 'FS Micronesia' THEN 'Micronesia'
            WHEN 'Faeroe Isds' THEN 'Faroe Islands'
			WHEN 'Iran (Islamic Republic of)' THEN 'Iran'
            WHEN &quot;Lao People's Democratic Republic&quot; THEN &quot;Laos&quot;
			WHEN 'Netherlands Antilles (former)' THEN 'Netherlands Antilles'
            WHEN 'Netherlands (Kingdom of the)' THEN 'Netherlands'
            WHEN 'Neth. Antilles' THEN 'Netherlands Antilles'
            WHEN 'Republic of Korea' THEN 'South Korea'
            WHEN 'Rep. of Moldova' THEN 'Republic of Moldova'
            WHEN 'Russian Federation' THEN 'Russia'
            WHEN 'Solomon Isds' THEN 'Solomon Islands'
            WHEN 'State of Palestine' THEN 'Palestine'
			WHEN 'Sudan (former)' THEN 'Sudan'
            WHEN 'Swaziland' THEN 'Eswatini'
            WHEN 'Syria' THEN 'Syrian Arab Republic'
            WHEN 'TFYR of Macedonia' THEN 'North Macedonia'
            WHEN 'Turks and Caicos Isds' THEN 'Turks and Caicos Islands'
			WHEN 'Türkiye' THEN 'Turkey'
            WHEN 'United Kingdom' THEN 'United Kingdom of Great Britain and Northern Ireland'
            WHEN 'United Republic of Tanzania' THEN 'Tanzania'
			WHEN 'United States of America' THEN 'USA'
			WHEN 'Venezuela (Bolivarian Republic of)' THEN 'Venezuela'
            WHEN 'Wallis and Futuna Isds' THEN 'Wallis and Futuna Islands'
                ELSE Area
            END AS TEXT
        ) AS Country,
        Year,
        ROUND(Value, 2) AS GDP
    FROM GDP
    WHERE Year BETWEEN 1996 AND 2016
    AND Element = 'Value US$ per capita'
	AND Item = 'Gross Domestic Product'
)
SELECT * FROM corrected_Areas
ORDER BY Country, Year</sql><sql name="GDPSA">CREATE VIEW GDPSA AS
SELECT g.Country, g.Year, g.GDP, a.Inflation
FROM GDPS g
LEFT JOIN AP2 a ON g.Country = a.Country AND g.Year = a.Year
ORDER BY g.Country, g.Year;</sql><sql name="CommoditySMPG*">--CREATE VIEW CommoditySMPG AS
SELECT 
    c.Country,
    c.Year,
    c.total_weight_kg,
    c.availability_of_metro,
    c.lines,
    c.stations,
    c.annual_ridership_mill,
    c.Population_eating_chocolate,
	c.Cost_kg_USD, 
	c.Urban_population, 
	c.Lifetime,
    g.GDP AS GDP_USD,
	g.Inflation,
    CASE WHEN c.Population_eating_chocolate &gt; 0 THEN ROUND(c.total_weight_kg / c.Population_eating_chocolate, 2) ELSE NULL
    END AS kg_per_person,
	
    CASE WHEN g.GDP &gt; 0 THEN ROUND(c.total_weight_kg / g.GDP, 2) ELSE NULL
    END AS kg_per_GDP
	
FROM 
    CommoditySMP c
LEFT JOIN 
    GDPSA g ON c.Country = g.Country AND c.Year = g.Year
ORDER BY 
    c.Country,
	c.Year</sql><sql name="ОБРАЗЕЦ">SELECT DISTINCT country from Urban1
ORDER by country ASC
</sql><current_tab id="15"/></tab_sql></sqlb_project>
